const getBaseURL = () => {
	return new URL('.', import.meta.url);
};


class MyLogo extends HTMLElement {
  html = `
      <div id="logo" class="">mon logo</div>
      <br><br><br>
      <input type="color" id="colorSelect">
    `;
  style = `
    #logo {
        font-size:300px;
        color:yellow;
        display:inline-block;
        text-shadow: 0 1px 0 #ccc,
                     0 2px 0 #c9c9c9,
                     0 3px 0 #bbb,
                     0 4px 0 #b9b9b9,
                     0 5px 0 #aaa,
                     0 6px 1px rgba(0,0,0,.1),
                     0 0 5px rgba(0,0,0,.1),
                     0 1px 3px rgba(0,0,0,.3),
                     0 3px 5px rgba(0,0,0,.2),
                     0 5px 10px rgba(0,0,0,.25),
                     0 10px 10px rgba(0,0,0,.2),
                     0 20px 20px rgba(0,0,0,.15);
      }   
      .vibrate-3 {
        -webkit-animation: vibrate-3 0.5s linear infinite both;
                animation: vibrate-3 0.5s linear infinite both;
      }

      /* ----------------------------------------------
 * Generated by Animista on 2021-1-28 23:7:42
 * Licensed under FreeBSD License.
 * See http://animista.net/license for more info. 
 * w: http://animista.net, t: @cssanimista
 * ---------------------------------------------- */

/**
 * ----------------------------------------
 * animation vibrate-3
 * ----------------------------------------
 */
@-webkit-keyframes vibrate-3 {
  0% {
    -webkit-transform: translate(0);
            transform: translate(0);
  }
  10% {
    -webkit-transform: translate(-2px, -2px);
            transform: translate(-2px, -2px);
  }
  20% {
    -webkit-transform: translate(2px, -2px);
            transform: translate(2px, -2px);
  }
  30% {
    -webkit-transform: translate(-2px, 2px);
            transform: translate(-2px, 2px);
  }
  40% {
    -webkit-transform: translate(2px, 2px);
            transform: translate(2px, 2px);
  }
  50% {
    -webkit-transform: translate(-2px, -2px);
            transform: translate(-2px, -2px);
  }
  60% {
    -webkit-transform: translate(2px, -2px);
            transform: translate(2px, -2px);
  }
  70% {
    -webkit-transform: translate(-2px, 2px);
            transform: translate(-2px, 2px);
  }
  80% {
    -webkit-transform: translate(-2px, -2px);
            transform: translate(-2px, -2px);
  }
  90% {
    -webkit-transform: translate(2px, -2px);
            transform: translate(2px, -2px);
  }
  100% {
    -webkit-transform: translate(0);
            transform: translate(0);
  }
}
@keyframes vibrate-3 {
  0% {
    -webkit-transform: translate(0);
            transform: translate(0);
  }
  10% {
    -webkit-transform: translate(-2px, -2px);
            transform: translate(-2px, -2px);
  }
  20% {
    -webkit-transform: translate(2px, -2px);
            transform: translate(2px, -2px);
  }
  30% {
    -webkit-transform: translate(-2px, 2px);
            transform: translate(-2px, 2px);
  }
  40% {
    -webkit-transform: translate(2px, 2px);
            transform: translate(2px, 2px);
  }
  50% {
    -webkit-transform: translate(-2px, -2px);
            transform: translate(-2px, -2px);
  }
  60% {
    -webkit-transform: translate(2px, -2px);
            transform: translate(2px, -2px);
  }
  70% {
    -webkit-transform: translate(-2px, 2px);
            transform: translate(-2px, 2px);
  }
  80% {
    -webkit-transform: translate(-2px, -2px);
            transform: translate(-2px, -2px);
  }
  90% {
    -webkit-transform: translate(2px, -2px);
            transform: translate(2px, -2px);
  }
  100% {
    -webkit-transform: translate(0);
            transform: translate(0);
  }
}

     
    `;
  constructor() {
    super();
    this.attachShadow({
      mode: "open"
    });
    this.couleur = this.getAttribute("couleur");
    this.text = this.getAttribute("text");
    this.animationClass = this.getAttribute("animation");
  }

  fixRelativeURLs() {
    let images = this.shadowRoot.querySelectorAll('img');
    images.forEach((e) => {
      let imagePath = e.getAttribute('src');
	    e.src = getBaseURL() + '/' + imagePath;
    });
    this.myLogo.style.background = "url(" + getBaseURL() + "images/miaou.gif)";
  }

  connectedCallback() {
    this.shadowRoot.innerHTML = `<style>${this.style}</style>` + this.html;
    this.myLogo = this.shadowRoot.querySelector("#logo");
    this.fixRelativeURLs();
    this.myLogo.addEventListener("click", () => {
      console.log("Logo clickÃ©");
    });
    this.myLogo.style.color = this.couleur;
    this.myLogo.textContent = this.text;
    if(this.animationClass)
      this.myLogo.classList.add(this.animationClass);
    this.shadowRoot
      .querySelector("#colorSelect")
      .addEventListener("input", (event) => {
        this.myLogo.style.color = event.target.value;
      });
  }
  changeColor(newColor){
    this.myLogo.style.color = newColor;
  }
  changeText(newText) {
    this.myLogo.textContent = newText;
  }
  changeImg(img){
    this.myLogo.style.background = "url(" + getBaseURL() + "images/" + img +")";
  }
  nyan(){
    html = `
      <div id="logo" class="">mon logo</div>
      <br><br><br>
      <input type="color" id="colorSelect">
      <audio
        autoplay
        controls
        src="/audio/nyan.mp3">
            Your browser does not support the
            <code>audio</code> element.
      </audio>
    `;
  }
}

customElements.define("my-logo", MyLogo);